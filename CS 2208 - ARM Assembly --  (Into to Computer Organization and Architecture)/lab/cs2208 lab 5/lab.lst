


ARM Macro Assembler    Page 1 


    1 00000000         ;Q1
    2 00000000         ; AREA Lab, CODE, READONLY
    3 00000000         ; ENTRY
    4 00000000         ; MOV   r1,#2   ;Put 2 in register 1
    5 00000000         ; MOV   r2,#3   ;Put 3 in register 2
    6 00000000         ; ADD   r0,r1,r2  ;Add r1 to r2 and store result in r0
    7 00000000         ; END
    8 00000000         
    9 00000000         ;Q2
   10 00000000         ; AREA Lab, CODE, READONLY
   11 00000000         ; ENTRY
   12 00000000         ; MOV   r3,#4   ;Put 4 in register 3
   13 00000000         ; MOV   r4,#5   ;put 5 in register 4
   14 00000000         ; END
   15 00000000         
   16 00000000         ;Q3
   17 00000000         ; AREA Lab, CODE, READONLY
   18 00000000         ; ENTRY
   19 00000000         ; MOV   r0,#5   ;Put 5 into register 0
   20 00000000         ; MOV   r1,#4   ;Put 4 into register 1
   21 00000000         ; MOV   r2,#3   ;Put 3 into register 2
   22 00000000         ; MOV   r3,#2   ;Put 2 into register 3
   23 00000000         ; MOV   r4,#1   ;Put 1 into register 4
   24 00000000         ; MUL   r5,r3,r4  ;Multiply values stored in register 3 
                       and 4 and store the result into register 5
   25 00000000         ; SUB   r5,r2,r5  ;Subtract the value stored in register
                        2 by the value in register 5 and store the result into 
                       register 5
   26 00000000         ; ADD   r5,r5,r1  ;Add the value stored in register 1 to
                        the value stored in register 5 and store the result int
                       o register 5
   27 00000000         ; ADD   r5,r5,r0  ;Add the value stored in register 0 to
                        the value stored in register 5 and store the result int
                       o register 5
   28 00000000         ; END
   29 00000000         
   30 00000000         ;Q4
   31 00000000         ; AREA Lab, CODE, READWRITE
   32 00000000         ; ENTRY
   33 00000000         ; LDR   r0,A   ;Put 5 into register 0
   34 00000000         ; LDR   r1,B   ;Put 4 into register 1
   35 00000000         ; LDR   r2,C   ;Put 3 into register 2
   36 00000000         ; LDR   r3,D   ;Put 2 into register 3
   37 00000000         ; LDR   r4,E   ;Put 1 into register 4
   38 00000000         ; MUL   r5,r3,r4  ;Multiply values stored in register 3 
                       and 4 and store the result into register 5
   39 00000000         ; SUB   r5,r2,r5  ;Subtract the value stored in register
                        2 by the value in register 5 and store the result into 
                       register 5
   40 00000000         ; ADD   r5,r5,r1  ;Add the value stored in register 1 to
                        the value stored in register 5 and store the result int
                       o register 5
   41 00000000         ; ADD   r5,r5,r0  ;Add the value stored in register 0 to
                        the value stored in register 5 and store the result int
                       o register 5
   42 00000000         ; STR   r0,Z   ;Store the value in register 0 into memor
                       y location Z
   43 00000000         ;A DCD  4    ;Put 4 in memory location A
   44 00000000         ;B DCD   12    ;Put 12 in memory location B



ARM Macro Assembler    Page 2 


   45 00000000         ;C DCD   -2    ;Put -2 in memory location C
   46 00000000         ;D DCD   -5    ;Put -5 in memory location D
   47 00000000         ;E DCD   -9    ;Put -9 in memory location E
   48 00000000         ;Z DCD   0    ;Put 0 in memory location Z
   49 00000000         ; END
   50 00000000         
   51 00000000         ;Q5
   52 00000000         ; AREA Lab, CODE, READWRITE
   53 00000000         ; ENTRY
   54 00000000         ; LDR   r0,A   ;Put 5 into register 0
   55 00000000         ; LDR   r1,B   ;Put 4 into register 1
   56 00000000         ; LDR   r2,C   ;Put 3 into register 2
   57 00000000         ; LDR   r3,D   ;Put 2 into register 3
   58 00000000         ; LDR   r4,E   ;Put 1 into register 4
   59 00000000         ; MUL   r5,r3,r4  ;Multiply values stored in register 3 
                       and 4 and store the result into register 5
   60 00000000         ; SUB   r5,r2,r5  ;Subtract the value stored in register
                        2 by the value in register 5 and store the result into 
                       register 5
   61 00000000         ; ADD   r5,r5,r1  ;Add the value stored in register 1 to
                        the value stored in register 5 and store the result int
                       o register 5
   62 00000000         ; ADD   r5,r5,r0  ;Add the value stored in register 0 to
                        the value stored in register 5 and store the result int
                       o register 5
   63 00000000         ; STR   r0,Z   ;Store the value in register 0 into memor
                       y location Z
   64 00000000         ;A DCB   4    ;Put 4 in memory location A
   65 00000000         ;B DCB   12    ;Put 12 in memory location B
   66 00000000         ;C DCB   -2    ;Put -2 in memory location C
   67 00000000         ;D DCB   -5    ;Put -5 in memory location D
   68 00000000         ;E DCB   -9    ;Put -9 in memory location E
   69 00000000         ;Z DCB   0    ;Put 0 in memory location Z
   70 00000000         ; END
   71 00000000         
   72 00000000         ;Lab 2
   73 00000000         ;Q1
   74 00000000         ; AREA Lab, CODE, READONLY
   75 00000000         ; ENTRY
   76 00000000         ; MOV   R0, pc   ;Place the next instructions into the c
                       ontents of register 0
   77 00000000         ; END
   78 00000000         ;Value of R0 was 0x00000008 --> PC = 0x00000008
   79 00000000         
   80 00000000         ;Q2
   81 00000000         ; AREA Lab, CODE, READWRITE
   82 00000000         ; ENTRY
   83 00000000         ; LDR R1, [R0]
   84 00000000         ; LDR R2, = 0x12345678
   85 00000000         ; LDR R3, = 0x12
   86 00000000         ; END
   87 00000000         
   88 00000000         ;Q3
   89 00000000         ; AREA Lab, CODE, READWRITE
   90 00000000         ; ENTRY
   91 00000000         ; LDR R3, X
   92 00000000         ; LDR R4, =X
   93 00000000         ; ADR R5, X
   94 00000000         ;loop B loop



ARM Macro Assembler    Page 3 


   95 00000000         ;X DCD 0x70707070
   96 00000000         ; END
   97 00000000         
   98 00000000         ;Q4
   99 00000000         ; AREA Lab, CODE, READONLY
  100 00000000         ; ENTRY
  101 00000000         ; LDR R0, = 0x12345678
  102 00000000         ;loop B loop
  103 00000000         ; AREA Lab, READONLY
  104 00000000         ;X DCD 0x70707070
  105 00000000         ; END
  106 00000000         
  107 00000000         ; AREA Lab, CODE, READONLY
  108 00000000         ; ENTRY
  109 00000000         ; LDR R0, = 0x12345678
  110 00000000         ;loop B loop
  111 00000000         ;X DCD 0x70707070
  112 00000000         ; END
  113 00000000         
  114 00000000         ;Lab 3
  115 00000000         ;Q1
  116 00000000         ; AREA Pointers, CODE, READONLY
  117 00000000         ; ENTRY
  118 00000000         ; ADR  r0,List  ;register r0 points to List
  119 00000000         ; MOV  r1,#5   ;initialize loop counter in r1 to 5
  120 00000000         ; MOV  r2,#0   ;clear the sum in r2
  121 00000000         ;Q1a ADD  r2,r2,r3 
  122 00000000         ;Q1a Loop LDR r3, [r0, #4]! 
  123 00000000         ;Loop LDR  r3,[r0]  ;copy the element pointed at by r0 t
                       o r3
  124 00000000         ; ADD  r0,r0,#4  ;point to the next element in the serie
                       s
  125 00000000         ; ADD  r2,r2,r3  ;add the element to the running total
  126 00000000         ; SUBS  r1,r1,#1  ;decrement to the loop counter
  127 00000000         ; BNE Loop    ;repeat until all elements added
  128 00000000         ;Endless B Endless  ;infinite loop
  129 00000000         ;List DCD  3,4,3,6,7  ;the numbers to be added together
  130 00000000         ;each one is 4 bytes (20 bytes in total)
  131 00000000         ; END 
  132 00000000         
  133 00000000         ;Q2
  134 00000000         ; AREA Lab3, CODE, READWRITE
  135 00000000         ; ENTRY
  136 00000000         ; MOV r0, #2
  137 00000000         ; AND r0, #2_1
  138 00000000         ; LSLEQ r1, r1, #8
  139 00000000         ; LSREQ r2, r2, #8
  140 00000000         
  141 00000000         ; LSRNE r1, r1, r0 
  142 00000000         ; LSLNE r2, r2, r0
  143 00000000         
  144 00000000         ; ADD r4, r1, r2, r3, LSR #4 
  145 00000000         ; END
  146 00000000         
  147 00000000         ;Q3
  148 00000000         ; AREA Lab3, CODE, READWRITE
  149 00000000         ; ENTRY
  150 00000000         ; MOV R4, #2
  151 00000000         ; ADD r4, r4, r4, LSL #14



ARM Macro Assembler    Page 4 


  152 00000000         ;Loop B Loop
  153 00000000         ; END
  154 00000000         
  155 00000000         ;Q4
  156 00000000         ; AREA Lab3, CODE, READWRITE
  157 00000000         ; ENTRY
  158 00000000         ; MOV r2, #3
  159 00000000         ; MOV r3, #3
  160 00000000         ; AND r2, r3, #0x1080 ;AND operation on r3 and operator 
                       3, store result into r2
  161 00000000         ;Loop B Loop
  162 00000000         ; END
  163 00000000         
  164 00000000         ;  AREA upc, CODE, READWRITE
  165 00000000         ;  ENTRY
  166 00000000         ;  LDR  r0, =UPC  ;Load UPC into register 0
  167 00000000         ;  MOV  r1, #0   ;Clear register 1 for storing sum of ev
                       en position digits
  168 00000000         ;  MOV  r2, #0   ;Clear register 2 for storing sum of od
                       d position digits
  169 00000000         ;  MOV  r3, #0   ;Incrementer for the loop
  170 00000000         ;  LDRB  r4, [r0,#11] ;Store the Check Digit of the give
                       n UPC code
  171 00000000         ;  SUB  r4, r4, #48  ;Convert ASCII letter to integer va
                       lue
  172 00000000         
  173 00000000         ;Loop LDRB  r5, [r0,R3]  ;Load register 5 with a byte fr
                       om register 3
  174 00000000         ;  SUB  r5, r5, #48  ;Convert the byte from an ASCII cod
                       e to an integer value
  175 00000000         ;  ADD  r6, r6 ,r3  ;Store content of r3 into r6
  176 00000000         ;  ANDS r6, #2_1  ;Check to see if the position is odd
  177 00000000         ;  BEQ  EVEN   ;Branch to go if position is even
  178 00000000         ;  ADD  r2, r2, r5  ;Odd position branch: add the intege
                       r into register 1
  179 00000000         ;  B   Done   ;Branch off to go to the next part of the 
                       loop
  180 00000000         ;EVEN  ADD  r1, r1, r5  ;Even position branch: Add the i
                       nteger into register 2
  181 00000000         ;Done  ADD  r3, r3, #1  ;Increment register 3 by one to 
                       go to the next position
  182 00000000         ;  MOV  R6, #0   ;Reset the contents of r6
  183 00000000         ;  CMP  r3, #11   ;Compare the value in register 3 to co
                       nstant 12 to check if its the end of the UPC code
  184 00000000         ;  BNE  Loop   ;Loop back upwards to the label
  185 00000000         
  186 00000000         ;  ADD r1, r1, LSL #1   ;Mulitply contents of r1 by thre
                       e
  187 00000000         ;  ADD r1, r1, r2   ;Add the odd and even position sums 
                       and store the result into register 1
  188 00000000         ;  SUB r1, r1, #1   ;Subtract the content of register 1 
                       by 1 and store it back in
  189 00000000         
  190 00000000         ;Repeat CMP r1, #10    ;Compare the value in register 1 
                       and 10
  191 00000000         ;  BGT Remain    ;Branch if the value in register 1 is g
                       reater than 10
  192 00000000         ;  B Out     ;Branch out of the loop if the value in reg
                       ister 1 is less than 10



ARM Macro Assembler    Page 5 


  193 00000000         ;Remain  SUB r1,r1,#10   ;Subtract the value in register
                        1 by 10
  194 00000000         ;  B Repeat    ;Repeat the loop
  195 00000000         
  196 00000000         ;Out  RSB r1, r1, #9   ;Subtract 9 from the remainder in
                        register 1 to get the calculated check digit. Store it 
                       in register 1.
  197 00000000         ;  CMP r1, r4    ;Check if the calculated check digit is
                        equal to the actual check digit
  198 00000000         ;  BEQ RIGHT
  199 00000000         ;  MOV r0, #2
  200 00000000         ;  B Endless
  201 00000000         ;RIGHT MOV r0, #1
  202 00000000         
  203 00000000         ;Endless B Endless
  204 00000000         ; AREA upc, DATA, READONLY
  205 00000000         ;UPC DCB  "013800150738"  ;UPC string 
  206 00000000         ; END
  207 00000000         
  208 00000000         ;q1
  209 00000000         ;  AREA Lab4, CODE, READWRITE
  210 00000000         ;  ENTRY
  211 00000000         ;  
  212 00000000         ;  ADDPL r2, r1, r0, LSL #5
  213 00000000         ;  RSBHI r4, r3, #0x990
  214 00000000         ;  MOV r4, #2_10011001
  215 00000000         ;  MOV r3, #2_00001001
  216 00000000         ; ANDS  r6, r5, #0x00FF
  217 00000000         ;  MOV r1, #2176
  218 00000000         ;  END
  219 00000000         ;q3
  220 00000000         ;  AREA Lab4, CODE, READWRITE
  221 00000000         ;  MOV r1, #2
  222 00000000         ;  MOV r0, #1
  223 00000000         ;comp CMP r0, r1
  224 00000000         ;  BEQ stop
  225 00000000         ;  BGT sub1
  226 00000000         ;  BLT sub2
  227 00000000         ;sub1 SUB r0, r0, r1
  228 00000000         ;  B comp
  229 00000000         ;sub2 SUB r1, r1, r0
  230 00000000         ;  B  comp
  231 00000000         ;stop END
  232 00000000         
  233 00000000         ;  AREA Lab4, CODE, READWRITE
  234 00000000         ;  MOV r1, #2
  235 00000000         ;  MOV r0, #1
  236 00000000         ;back CMP r0, r1
  237 00000000         ;  SUBGT r0, r0, r1 
  238 00000000         ;  SUBLT r1, r1, r0
  239 00000000         ;  B back
  240 00000000         ;stop END
  241 00000000         
  242 00000000         ;Examples
  243 00000000         ;  AREA Example, CODE, READONLY
  244 00000000         ;  ENTRY
  245 00000000         ;  MOV r0, #1
  246 00000000         ;  MOV r1, #9
  247 00000000         ;  MOV r2, #3



ARM Macro Assembler    Page 6 


  248 00000000         ;  MOV r3, #8
  249 00000000         ;  ADD r4, r1, r0
  250 00000000         ;  ADDS r5, r2, r3
  251 00000000         ;Endless B Endless
  252 00000000         ;  END
  253 00000000         
  254 00000000         ;  AREA prog1, CODE, READONLY
  255 00000000         ;  ENTRY
  256 00000000         ;  AND r2,r3, #0x1080
  257 00000000         ;  neg r0, r1
  258 00000000         ;  ldr r0, [r1]
  259 00000000         ;  ldr r0, =0xff
  260 00000000         ;  ldr r0, =0xfff
  261 00000000         ;  ldr r0, X
  262 00000000         ;  ldr r0, =X
  263 00000000         ;  adr r0, X
  264 00000000         ;loop B loop
  265 00000000         ;  AREA prog1, DATA, READWRITE
  266 00000000         ;X  DCD 0xAAAAAAAA
  267 00000000         ;  END
  268 00000000         
  269 00000000         ;Lab 5
  270 00000000         ;Q1 and Q2
  271 00000000                 AREA             Lab5, CODE, READONLY
  272 00000000                 ENTRY
  273 00000000 E28FD0A8        ADR              SP, RegStack
  274 00000004 E28F006C 
                       main    ADR              r0,a        ;r0 is a pointer to
                                                             array a
  275 00000008 E28F109C        ADR              r1,endOfArray ;address at the e
                                                            nd of the array
  276 0000000C E0411000        SUB              r1,r1,r0    ;number of the arra
                                                            y bytes
  277 00000010 E1A01141        ASR              r1,#2       ;r1: length of the 
                                                            array,i.e., n
  278 00000014 E3A02000        MOV              r2,#0       ;r2: outer loop cou
                                                            nter,i.e., i
  279 00000018 E2414001        SUB              r4,r1,#1    ;r4 is (n - 1)
  280 0000001C E1520004 
                       startOuter
                               CMP              r2,r4       ;compare i with (n 
                                                            - 1)
  281 00000020 AA00000A        BGE              endOuter    ;if i >= (n - 1), t
                                                            hen exit the outer 
                                                            loop
  282 00000024 E3A03000        MOV              r3,#0       ;r3 is the inner lo
                                                            op counter, i.e., j
                                                            
  283 00000028 E0445002        SUB              r5,r4,r2    ;r5 is (n - 1 - i)
  284 0000002C E1530005 
                       startInner
                               CMP              r3,r5       ;compare j with (n 
                                                            - 1 - j)
  285 00000030 AA000004        BGE              endInner    ;if j >= (n - 1 -j)
                                                            , then exit the inn
                                                            er loop
  286 00000034 E0806103        ADD              r6,r0,r3,LSL#2 ;r6 is a pointer
                                                             to a[j]
  287 00000038 E2867004        ADD              r7,r6,#4    ;r7 is a pointer to



ARM Macro Assembler    Page 7 


                                                             a[j+1]
  288 0000003C EB000004        BL               sortTwo     ;call sortTwo(*a[j]
                                                            ,*a[j+1])
  289 00000040 E2833001        ADD              r3,r3,#1    ;increment inner co
                                                            unter j
  290 00000044 EAFFFFF8        B                startInner  ;loop again (inner 
                                                            loop)
  291 00000048 E2822001 
                       endInner
                               ADD              r2,r2,#1    ;increment outer co
                                                            unter i
  292 0000004C EAFFFFF2        B                startOuter  ;loop again (outer 
                                                            loop)
  293 00000050 EAFFFFFE 
                       endOuter
                               B                endOuter
  294 00000054         
  295 00000054 E8AD40DF 
                       sortTwo STMEA            sp!, {R0-R4, R6, R7, LR} ;Store
                                                             registers to stack
                                                             pointer
  296 00000058 E51D0004        LDR              R0, [sp, #-4]
  297 0000005C E5901000        LDR              R1, [R0]
  298 00000060 E51D2008        LDR              R2, [sp, #-8]
  299 00000064 E5923000        LDR              r3, [r2]
  300 00000068 41A04003        MOVMI            R4, R3
  301 0000006C 45821000        STRMI            R1, [R2]
  302 00000070 45804000        STRMI            R4, [R0]
  303 00000074 E93D80DF        LDMEA            sp!, {R0-R4, R6, R7, PC} ;Resto
                                                            re the working regi
                                                            sters 
  304 00000078                 AREA             Lab5, DATA, READWRITE
  305 00000078 0000002C 
              FFFFFFC8 
              00000003 
              00000041 
              FFFFFFF8 
              00000020 
              00000006 
              FFFFFFA9 
              00000036 
              00000041 
              00000057 
              00000020 
              00000041 a       DCD              44,-56,3,65,-8,32,6,-87,54,65,8
7,32,65
  306 000000AC 00      endOfArray
                               SPACE            1
  307 000000AD 00 00 00        ALIGN
  308 000000B0 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 8 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    RegStack
                               SPACE            128
  309 00000130                 END
Command Line: --debug --xref --bi --apcs=interwork --depend=.\lab.d -o.\lab.o -
I"C:\Program Files (x86)\ARM simulator\ARM\RV31\INC" -I"C:\Program Files (x86)\
ARM simulator\ARM\CMSIS\Include" --predefine="__EVAL SETA 1" --list=.\lab.lst l
ab.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Lab5 00000000

Symbol: Lab5
   Definitions
      At line 271 in file lab.s
   Uses
      None
Comment: Lab5 unused
RegStack 000000B0

Symbol: RegStack
   Definitions
      At line 308 in file lab.s
   Uses
      At line 273 in file lab.s
Comment: RegStack used once
a 00000078

Symbol: a
   Definitions
      At line 305 in file lab.s
   Uses
      At line 274 in file lab.s
Comment: a used once
endInner 00000048

Symbol: endInner
   Definitions
      At line 291 in file lab.s
   Uses
      At line 285 in file lab.s
Comment: endInner used once
endOfArray 000000AC

Symbol: endOfArray
   Definitions
      At line 306 in file lab.s
   Uses
      At line 275 in file lab.s
Comment: endOfArray used once
endOuter 00000050

Symbol: endOuter
   Definitions
      At line 293 in file lab.s
   Uses
      At line 281 in file lab.s
      At line 293 in file lab.s

main 00000004

Symbol: main
   Definitions
      At line 274 in file lab.s
   Uses
      None
Comment: main unused
sortTwo 00000054




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: sortTwo
   Definitions
      At line 295 in file lab.s
   Uses
      At line 288 in file lab.s
Comment: sortTwo used once
startInner 0000002C

Symbol: startInner
   Definitions
      At line 284 in file lab.s
   Uses
      At line 290 in file lab.s
Comment: startInner used once
startOuter 0000001C

Symbol: startOuter
   Definitions
      At line 280 in file lab.s
   Uses
      At line 292 in file lab.s
Comment: startOuter used once
10 symbols
341 symbols in table
