


ARM Macro Assembler    Page 1 


    1 00000000         ;Vivian Lam
    2 00000000         ;program to recursively computre factorial. uses the sta
                       ck
    3 00000000         
    4 00000000         ;-------------------------------------------------------
                       -------------------------
    5 00000000                 AREA             power, CODE, READONLY
    6 00000000 0000000C 
                       n       EQU              12
    7 00000000 00000002 
                       x       EQU              2
    8 00000000                 ENTRY
    9 00000000         
   10 00000000 E59FD028 
                       Main    LDR              sp, =stackk ;define the stack b
                                                            y setting a pointer
                                                             to it
   11 00000004 E3A0000C        MOV              r0, #n      ;prepare the parame
                                                            ter
   12 00000008 E3A02002        MOV              r2, #x
   13 0000000C         
   14 0000000C E52D0004        STR              r0,[sp,#-4]! ;push the paramete
                                                            r (n)on the stack
   15 00000010 E52D2004        STR              r2,[sp,#-4]! ;pushing x
   16 00000014         
   17 00000014 E24DD004        SUB              sp,sp,#4    ;reserve a place in
                                                             the stack for the 
                                                            return value
   18 00000018         
   19 00000018 EB000005        BL               Power       ;call the power sub
                                                            routine
   20 0000001C         
   21 0000001C E49D0004        LDR              r0,[sp],#4  ;load the result in
                                                             r0 and pop it from
                                                             the stack
   22 00000020 E28DD008        ADD              sp,sp,#8    ;also remove the pa
                                                            rameter from the st
                                                            ack
   23 00000024         
   24 00000024 E28F108C        ADR              r1,result   ;get the address of
                                                             the result variabl
                                                            e
   25 00000028 E5810000        STR              r0,[r1]     ;store the final re
                                                            sult in the result 
                                                            variable
   26 0000002C         
   27 0000002C EAFFFFFE 
                       Loop    B                Loop        ;infinite loop so n
                                                            o error
   28 00000030         
   29 00000030         ;-------------------------------------------------------
                       -------------------------
   30 00000030 00000000        AREA             power, CODE, READONLY
   31 00000034 E92D4807 
                       Power   STMFD            sp!,{r0,r1,r2,fp,lr} ;push gene
                                                            ral registers, as w
                                                            ell as fp and lr
   32 00000038 E1A0B00D        MOV              fp,sp       ;set the fp for thi
                                                            s call



ARM Macro Assembler    Page 2 


   33 0000003C         
   34 0000003C E24DD004        SUB              sp,sp,#4    ;create space for t
                                                            he y local variable
                                                            
   35 00000040         
   36 00000040 E59B001C        LDR              r0,[fp,#28] ;load n: 5 register
                                                            s*4 + 4(from result
                                                             return address) + 
                                                            4 (from x) + (we do
                                                             not consider the 4
                                                             from n cus we alre
                                                            ady pointing to top
                                                            ) = 28 forward
   37 00000044 E59B2018        LDR              r2,[fp,#24] ;load x
   38 00000048         
   39 00000048 E3500000        CMP              r0,#0       ;if (n = 0)
   40 0000004C 03A00001        MOVEQ            r0,#1       ;{ prepare the valu
                                                            e to be returned
   41 00000050 058B0014        STREQ            r0,[fp,#20] ;  store the return
                                                            ed value in the sta
                                                            ck
   42 00000054 0A000015        BEQ              ret         ;  branch to the re
                                                            turn section 
   43 00000058         ;}
   44 00000058         
   45 00000058         ;is n odd?
   46 00000058 E3100001        TST              r0, #1      ;AND to check last 
                                                            bit: if it's a 1 th
                                                            en the register con
                                                            tains an odd number
                                                              
   47 0000005C         ;BNE Odd ;n is odd (zero flag not set) return x * power(
                       x, n - 1); 
   48 0000005C 0A000009        BEQ              Even        ;n is even (ztero f
                                                            lag set), y= power(
                                                            x, n >> 1); return 
                                                            y * y
   49 00000060         
   50 00000060         ;      LDR   r0,[fp,#0x18] ;get the parameter from the s
                       tack (get n)
   51 00000060         ;     LDR   r2,[] ;load x
   52 00000060         
   53 00000060         Odd                                  ;n is odd (zero fla
                                                            g not set) return x
                                                             * power(x, n - 1);
                                                             
   54 00000060         ;prepare the value to be returned (x, n-1)
   55 00000060 E2400001        SUB              r0,r0,#1    ;preparing n-1 and 
                                                            storing result into
                                                             r0
   56 00000064         ;push parameters to the stack (push x and n-1)
   57 00000064 E52D0004        STR              r0,[sp,#-4]! ;pushin n-1
   58 00000068 E52D2004        STR              r2,[sp,#-4]! ;push x to the sta
                                                            ck
   59 0000006C E24DD004        SUB              sp,sp,#4    ;reserve space in s
                                                            tack for return val
                                                            ue
   60 00000070         
   61 00000070 EBFFFFEF        BL               Power       ;call power subrout



ARM Macro Assembler    Page 3 


                                                            ine
   62 00000074 E49D0004        LDR              r0,[sp],#4  ;load result (the e
                                                            mpty space we creat
                                                            ed above) and pop
   63 00000078         
   64 00000078 E28DD008        ADD              sp,sp,#8    ;also remove the pa
                                                            rameters (there's t
                                                            wo:n and x, so use 
                                                            8) from the stack
   65 0000007C         
   66 0000007C E0020290        MUL              r2,r0,r2    ;calculating: retur
                                                            n x * fact(x,n-1); 
                                                            
   67 00000080 E58B2014        STR              r2,[fp,#20] ;store the returned
                                                             value in the stack
                                                             
   68 00000084 EA000009        B                ret         ;branch to return (
                                                            so that we don't ca
                                                            lculate the Even ca
                                                            se)
   69 00000088         
   70 00000088         
   71 00000088         Even                                 ;n is even (ztero f
                                                            lag set), y= power(
                                                            x, n >> 1); return 
                                                            y * y
   72 00000088         ;preparing new parameter: divide n by 2 by shifting righ
                       t by 1
   73 00000088 E1A000A0        LSR              r0,r0, #1
   74 0000008C         ;push parameters to the stack
   75 0000008C E52D0004        STR              r0,[sp,#-4]! ;pushin n/2
   76 00000090 E52D2004        STR              r2,[sp,#-4]! ;push x to the sta
                                                            ck
   77 00000094 E24DD004        SUB              sp,sp,#4    ;reserve space in s
                                                            tack for return val
                                                            ue
   78 00000098         
   79 00000098 EBFFFFE5        BL               Power       ;call power subrout
                                                            ine
   80 0000009C E49D0004        LDR              r0,[sp],#4  ;load result (the e
                                                            mpty space we creat
                                                            ed above) and pop
   81 000000A0         
   82 000000A0 E28DD008        ADD              sp,sp,#8    ;also remove the pa
                                                            rameters (there's t
                                                            wo:n and x, so use 
                                                            8) from the stack
   83 000000A4         
   84 000000A4 E50B0004        STR              r0,[fp,#-4] ;set y equal to the
                                                             result (store r0 i
                                                            nto the location of
                                                             y, which is fp-4<o
                                                            ffset cus stack typ
                                                            e is FD)
   85 000000A8 E0010090        MUL              r1,r0,r0    ;calculate y*y
   86 000000AC E58B1014        STR              r1,[fp,#20] ;store the returned
                                                             value in the stack
                                                            
   87 000000B0         



ARM Macro Assembler    Page 4 


   88 000000B0         
   89 000000B0 E1A0D00B 
                       ret     MOV              sp,fp       ;collapse all worki
                                                            ng spaces for this 
                                                            function call
   90 000000B4 E8BD8807        LDMFD            sp!,{r0,r1,r2,fp,pc} ;load all 
                                                            registers and retur
                                                            n to the caller
   91 000000B8         ;-------------------------------------------------------
                       -------------------------
   92 000000B8                 AREA             power, DATA, READWRITE
   93 000000B8 00000000 
                       result  DCD              0x00        ;the final result
   94 000000BC 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 5 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 6 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 7 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            SPACE            0x200       ;declare the space 
                                                            for stack
   95 000002BC                 ALIGN
   96 000002BC 00000000 
                       stackk  DCD              0x00        ;initial stack posi
                                                            tion (FD model)
   97 000002C0         ;-------------------------------------------------------
                       -------------------------
   98 000002C0                 END
Command Line: --debug --xref --bi --apcs=interwork --depend=.\power.d -o.\power
.o -I"C:\Program Files (x86)\ARM simulator\ARM\RV31\INC" -I"C:\Program Files (x
86)\ARM simulator\ARM\CMSIS\Include" --predefine="__EVAL SETA 1" --list=.\power
.lst power.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Even 00000088

Symbol: Even
   Definitions
      At line 71 in file power.s
   Uses
      At line 48 in file power.s
Comment: Even used once
Loop 0000002C

Symbol: Loop
   Definitions
      At line 27 in file power.s
   Uses
      At line 27 in file power.s
Comment: Loop used once
Main 00000000

Symbol: Main
   Definitions
      At line 10 in file power.s
   Uses
      None
Comment: Main unused
Odd 00000060

Symbol: Odd
   Definitions
      At line 53 in file power.s
   Uses
      None
Comment: Odd unused
Power 00000034

Symbol: Power
   Definitions
      At line 31 in file power.s
   Uses
      At line 19 in file power.s
      At line 61 in file power.s
      At line 79 in file power.s

power 00000000

Symbol: power
   Definitions
      At line 5 in file power.s
   Uses
      None
Comment: power unused
result 000000B8

Symbol: result
   Definitions
      At line 93 in file power.s
   Uses
      At line 24 in file power.s
Comment: result used once
ret 000000B0



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: ret
   Definitions
      At line 89 in file power.s
   Uses
      At line 42 in file power.s
      At line 68 in file power.s

stackk 000002BC

Symbol: stackk
   Definitions
      At line 96 in file power.s
   Uses
      At line 10 in file power.s
Comment: stackk used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

n 0000000C

Symbol: n
   Definitions
      At line 6 in file power.s
   Uses
      At line 11 in file power.s
Comment: n used once
x 00000002

Symbol: x
   Definitions
      At line 7 in file power.s
   Uses
      At line 12 in file power.s
Comment: x used once
2 symbols
344 symbols in table
