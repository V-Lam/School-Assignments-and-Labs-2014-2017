show databases;
use vlam54db;
show tables;

/*following questions are pretty self explanatory*/
/*Question 1*/
select LName from Customer;
/*Question 2*/
select distinct(LName) from Customer;
/*Question 3*/
select FName, LName, Email from Customer where Sex = "M";
/*Question 4*/
select Name from Movie,Genre where Movie.MovID=Genre.MovID and Genre.Genre="Comedy";

/*Question 5*/
/*showing movies in the 90s*/
select Name, Year from Movie where Year like "199%" order by Year;

/*Question 6*/
/*join movie and showing and theatreroom tables so that we can get date, time and capacity of star wars showing
NOTE: prof said it was OKAY that my output file doesn't quite line up*/
select date_format(Date, '%M-%d-%Y') as Showing_Date, date_format(Time, '%h %i %s %p') as Showing_Time, Capacity from Showing, TheatreRoom, Movie where Movie.MovID=Showing.MovID and Showing.RoomNo=TheatreRoom.RoomNo and Movie.Name="Star Wars";

/*Question 7*/
/*wildcarding and pattern matching to find instances of "the". NOTE prof said he wants words that include "the" such as "there"*/
select Name from Movie where Name like "%the%";

/*Question 8*/
/*join movie and showing tables so we can get customer first name and last name and movie name of showings ON or AFTER march 1st. we do greater than feb29*/
select FName, Lname, Name, Date from Customer, Movie, Showing, Selects where Customer.CusID=Selects.CusID and Selects.ShowID=Showing.ShowID and Showing.MovID=Movie.MovID and Date>"2016-02-29";

/*Question 9*/
/*join customer and selects table and genre table. 
distinct so no duplicates. concatenate the first and last name from Customer table and put into new column SciFi_Customers. select where genre is scifi*/
select distinct(concat_ws(' ',FName,LName)) as SciFi_Customers from Customer, Showing, Selects, Genre where Customer.CusID=Selects.CusID and Selects.ShowID=Showing.ShowID and Showing.MovID=Genre.MovID and Genre="SciFi";

/*Question 10*/
/*want difference between Movie and Showing so we use NOT IN*/
create view NOSHOWINGS as select Name from Movie where MovID not in (select MovID from Showing); 

/*Question 11*/
/*want difference between Movie and Selects JOINED with Showing*/
create view NOWATCH as select Name from Movie where MovID not in (Select MovID from Showing, Selects where Showing.ShowID=Selects.ShowID);


/*Question 12*/
/*use the above created views and union them*/
create view NOTSEEN as (select Name from NOSHOWINGS) UNION (select Name from NOWATCH);

/*we create a new view so we can select distinct to avoid duplicates. we also ensure that even if that* even if that movie wasnt seen at one showing, if it has another showing it wont be deslipayed; difference between NOTSEEN and (selects join showing join movie)*/
create view MoviesNotSeen as select distinct(Name)from NOTSEEN where Name not in (select distinct(Name) from Selects, Showing, Movie where Selects.ShowID=Showing.ShowID and Showing.MovID=Movie.MovID);

/*showing the results from question 10-12*/
select * from NOSHOWINGS;
select * from NOWATCH;
select * from MoviesNotSeen;

show tables;
drop view NOSHOWINGS;
drop view NOWATCH;
drop view NOTSEEN;
drop view MoviesNotSeen;
show tables;



/*Question 13*/
/*how many movies came out that year*/
select Year, count(Name) as Number_of_Movies from Movie group by Year;

/*Question 14*/
/*we sum to get the total*/
select sum(Price) as Total_sales from Selects;


/*Question 15*/
/*join showing and theatreroom*/
create view Question15 as select Selects.ShowID, CusID, Capacity from Selects, Showing, TheatreRoom where Selects.ShowID = Showing.ShowID and Showing.RoomNo =TheatreRoom.RoomNo;
select * from Question15;

/*to see if the room was overbooked*/
select ShowID, count(CusID) as Number_Of_Customers, Capacity from Question15 group by ShowID;
show tables;
drop view Question15;
show tables;