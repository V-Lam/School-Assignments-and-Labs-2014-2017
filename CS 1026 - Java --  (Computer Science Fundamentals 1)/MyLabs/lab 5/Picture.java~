import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.text.*;

/**
 * A class that represents a picture.  This class inherits from 
 * SimplePicture and allows the student to add functionality to
 * the Picture class.  
 * 
 * Copyright Georgia Institute of Technology 2004-2005
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture 
{
  ///////////////////// constructors //////////////////////////////////
  
  /**
   * Constructor that takes no arguments 
   */
  public Picture ()
  {
    /* not needed but use it to show students the implicit call to super()
     * child constructors always call a parent constructor 
     */
    super();  
  }
  
  /**
   * Constructor that takes a file name and creates the picture 
   * @param fileName the name of the file to create the picture from
   */
  public Picture(String fileName)
  {
    // let the parent class handle this fileName
    super(fileName);
  }
  
  /**
   * Constructor that takes the width and height
   * @param width the width of the desired picture
   * @param height the height of the desired picture
   */
  public Picture(int width, int height)
  {
    // let the parent class handle this width and height
    super(width,height);
  }
  
  /**
   * Constructor that takes a picture and creates a 
   * copy of that picture
   */
  public Picture(Picture copyPicture)
  {
    // let the parent class do the copy
    super(copyPicture);
  }
  
  ////////////////////// methods ///////////////////////////////////////
  
  /**
   * Method to return a string with information about this picture.
   * @return a string with information about the picture such as fileName,
   * height and width.
   */
  public String toString()
  {
    String output = "Picture, filename " + getFileName() + 
      " height " + getHeight() 
      + " width " + getWidth();
    return output;
    
  }

  /*****************************************************************
   * Method to mirror a piece of the temple
   *****************************************************************/
  public void mirrorTemple(){
    //Declare local variables
    int mirrorPoint = 276;
    Pixel leftPix = null;
    Pixel rightPix = null;
    
    //Loop through all rows, where the temple must be mirrored
    for (int y=27;y<97;y++){
      for (int x=13; x<mirrorPoint; x++){
        leftPix = getPixel(x,y); //get left pixel (good pixel)
        //Get right pixel (the mirror location)
        rightPix = getPixel(mirrorPoint + (mirrorPoint-x),y);
        //Swap the colours
        rightPix.setColor(leftPix.getColor());
      }
    }
  }
  

  /*****************************************************************
   * Mirror a picture vertically
   *****************************************************************/
  public void mirrorVertical(){
    //Declare local variables
    int width = this.getWidth();
    int mirrorPoint = width/2;
    Pixel leftPix = null;
    Pixel rightPix = null;
    
    //Loop through all rows, only half way
    for (int y=0;y<this.getHeight();y++){
      for (int x=0; x<mirrorPoint; x++){
        leftPix = getPixel(x,y);
        rightPix = getPixel(width-1-x,y);
        rightPix.setColor(leftPix.getColor()); //Swap colours of left and right
      }
    }  
  }
  
  
  /*****************************************************************
   * Method to make a picture greyscale
   *****************************************************************/
  public void goodGrey(){
    //Declare local variables; get an array of pixels out of the picture
    Pixel[] pixelArray = this.getPixels();
    Pixel pix = null;
    int luminance = 0;
    double redV = 0;
    double blueV= 0;
    double greenV= 0;
    
    //Loop through all pixels in the array
    for (int i=0; i<pixelArray.length;i++){
      pix = pixelArray[i];
      redV = pix.getRed() * 0.299;
      blueV = pix.getBlue() * 0.587;
      greenV = pix.getGreen() * 0.114;
      luminance = (int)(redV + greenV + blueV);
      //Change pixel colour to the new colour created using luminance
      pix.setColor(new Color(luminance, luminance, luminance));
    }
  }
  
/***************************************
** Copy picture ***
****************************************/

public void copyPicture (Picture sourcePicture) 
{ 
   Pixel sourcePixel = null; 
   Pixel targetPixel = null; 
   // loop through the columns 
   for (int sourceX = 0, targetX = 0; 
        sourceX < sourcePicture.getWidth(); 
sourceX++, targetX++)    
   {    // loop through the rows 
     for (int sourceY = 0, targetY = 0; 
          sourceY < sourcePicture.getHeight(); 
sourceY++, targetY++)    
     { 
       // set the target pixel color to the source pixel color 
       sourcePixel = sourcePicture.getPixel(sourceX,sourceY); 
       targetPixel = this.getPixel(targetX,targetY); 
       targetPixel.setColor(sourcePixel.getColor()); 
     } 
   } 
 }


/**
  * Modified version of method from page 154 of the textbook for copying pictures
  */

 public void copyPictureTo(Picture sourcePicture, int xStart, int yStart)
 {
   Pixel sourcePixel = null;
   Pixel targetPixel = null;
   
   //loop through the columns
   try{
   for (int sourceX = 0, targetX = xStart;
        sourceX < sourcePicture.getWidth();
        sourceX++, targetX++)
   {
     //loop through the rows
     for (int sourceY = 0,
          targetY = yStart;
          sourceY < sourcePicture.getHeight();
          sourceY++, targetY++)
     {
       sourcePixel = sourcePicture.getPixel(sourceX,sourceY);
       targetPixel = this.getPixel(targetX,targetY);
       targetPixel.setColor(sourcePixel.getColor());
     } 
   }
  }catch(IndexOutOfBoundsException ex){System.out.println("Either xStart or yStart is out of bounds");System.exit(0);}
} 


/****************************
Crop picture
*****************************/
public void copyPictureTo(Picture sourcePicture, int startX, int startY,  
                           int endX, int endY, int targetStartX, int targetStartY) 
  { 
    Pixel sourcePixel = null; 
    Pixel targetPixel = null; 
    // loop through the x values 
    for (int x = startX, tx = targetStartX;  x < endX && x < sourcePicture.getWidth() && tx < this.getWidth();  x++, tx++) 
    { 
      // loop through the y values 
      for (int y = startY, ty = targetStartY; y < endY && y < sourcePicture.getHeight() &&  ty < this.getHeight();  y++, ty++)  
      {

// copy the source color to the target color 
        sourcePixel = sourcePicture.getPixel(x,y); 
        targetPixel = this.getPixel(tx,ty); 
        targetPixel.setColor(sourcePixel.getColor()); 
      } 
    } 
  }
  
  /*****************************************************************
   * Method to make a negative of a picture
   *****************************************************************/
  public void negate(){
    //Local variables
    Pixel[] pixelArray = this.getPixels();
    Pixel pixel = null;
    int redV, blueV, greenV = 0;
    //Loop through all pixels in the picture
    for (int i=0; i<pixelArray.length;i++){
      pixel = pixelArray[i];
      redV=pixel.getRed();
      greenV=pixel.getGreen();
      blueV = pixel.getBlue();
      //Set the color to the negative of current color
      pixel.setColor(new Color(255-redV, 255-greenV, 255-blueV));
    }
  }
  
  
  /*****************************************************************
   * Method to create a fake sunset
   *****************************************************************/
  public void makeSunset(){
    //Create local variables and get array of pixels
    Pixel[] pixelArray = this.getPixels();
    Pixel pixel = null;
    int value = 0;
    int i=0;
    
    //Loop through all pixels
    while (i<pixelArray.length){
      pixel = pixelArray[i]; //get out current picture
      value = pixel.getBlue(); //get the blue value
      pixel.setBlue((int)(value*0.7)); //set a new blue
      value = pixel.getGreen(); //get the green value
      pixel.setGreen((int)(value*0.7)); //set the new green value
      i++; //increment counter
    }
  }
  
  
  /*****************************************************************
   * Method to decrease the red in a picture
   *****************************************************************/
  public void decreaseRed(){
    //Declare variables and get an array with all the pixels
    Pixel[] pixelArray = this.getPixels();
    Pixel pixel = null;
    int value = 0;
    int index = 0;
    //Loop through all pixels
    while (index < pixelArray.length){
      pixel = pixelArray[index]; //get pixel at each spot in the array in turn
      value = pixel.getRed(); //get the red value
      value=(int)(value*0.5); //change the red value by half
      pixel.setRed(value); //set a new red value
      index= index + 1; //increment so next time you get new pixel
    }
  }
  
  
} // end of class Picture, put all new methods before this

 